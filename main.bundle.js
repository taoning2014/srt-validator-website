!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r extends Error{constructor(e,t){super(e),this.lineNumber=t+1}}const s={hour:36e5,minute:6e4,second:1e3},o=/\r?\n/,i=/(\d+):(\d{1,2}):(\d{1,2}),(\d{1,3})/;function a(e,t){if(!e)throw new r("Missing sequence number",t);const n=Number(e);if(!Number.isInteger(n))throw new r(`Expected Integer for sequence number: ${e}`,t);return n}function u(e,t){if(!e)throw new r(`Missing time span: ${e}`,t);const[n,s]=e.split(" --\x3e ");if(!n||!s)throw new r(`Invalid time span: ${e}`,t);return{start:d(n,t),end:d(s,t)}}function d(e,t){const n=i.exec(e);if(!n)throw new r(`Invalid time stamp: ${e}`,t);const[o,a,u,d]=n.slice(1).map(Number);return o*s.hour+a*s.minute+u*s.second+d}const c="\n\n";function l(e){let t=e;const n=e/s.hour,r=(t%=s.hour)/s.minute,o=(t%=s.minute)/s.second,i=t%=s.second,a=[2,2,2,3],[u,d,c,l]=[n,r,o,i].map((e,t)=>`${Math.floor(e)}`.padStart(a[t],"0"));return`${u}:${d}:${c},${l}`}var m={parse:function(e){const t=e.split(o),n=[];for(var s=0;s<t.length;s++){const e=a(t[s],s),o=u(t[++s],s);s++;const i=[];for(;t[s]&&t[s].trim();)i.push(t[s]),s++;const d=i.join("\n");if(!d)throw new r("Missing caption text",s);n.push({sequenceNumber:e,time:o,text:d})}return n},serialize:function(e){return e.map(e=>`${e.sequenceNumber}\n${function(e){return`${l(e.start)} --\x3e ${l(e.end)}`}(e.time)}\n${e.text}`).join(c)}};class p{constructor(e){this.result=[],this.parsedJSON=e}validate(){if(!this.parsedJSON.length)return this.result}_addToResult({message:e="",lineNumber:t}){this.result.push({message:e,lineNumber:t,validator:this._validator})}}class f extends p{constructor(...e){super(...e),this._validator="LineNumberValidator"}validate(...e){return super.validate(...e),1!==this.parsedJSON[0].sequenceNumber&&this._addToResult({message:"number of sequence need to start with 1",lineNumber:1}),this.parsedJSON.map((e,t)=>{const{sequenceNumber:n}=e;n!==t+1&&this._addToResult({message:"number of sequence need to increment by 1",lineNumber:4*t+1})}),this.result}}class h extends p{constructor(...e){super(...e),this._validator="CaptionTimeSpanValidator"}validate(...e){super.validate(...e);let t=0;return this.parsedJSON.map(({time:{start:e,end:t}})=>({start:e,end:t})).map(({start:e,end:t},n)=>(e>=t&&this._addToResult({message:"start time should be less than end time",lineNumber:4*n+2}),{start:e,end:t})).map(({start:e,end:n},r)=>{0!==r?(t>e&&this._addToResult({message:"start time should be less than previous end time",lineNumber:4*r+2}),t=n):t=n}),this.result}}window.onload=(()=>{const e=document.getElementById("caption-file"),t=document.getElementById("caption-editor"),n=document.getElementById("caption-validator"),r=document.getElementById("info");function s({target:{result:e}}={}){t.value=e}function o(e){!function(e){for(;e.lastChild;)e.removeChild(e.lastChild)}(r),e.length?e.forEach(e=>{!function(e,{message:t,lineNumber:n,validator:r}={}){const s=document.createElement("li"),o=document.createTextNode(`${t} at ${n} from ${r}`);s.appendChild(o),s.classList.add("caption-validator__info","caption-validator__info--error"),e.appendChild(s)}(r,e)}):function(e,{message:t}={}){const n=document.createElement("li"),r=document.createTextNode(t);n.appendChild(r),n.classList.add("caption-validator__info"),e.appendChild(n)}(r,{message:"no errors in your caption file"})}e.addEventListener("change",e=>{const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=s,n.readAsText(t)}),n.addEventListener("click",()=>{o(function(e){const t=[];let n;try{n=m.parse(e)}catch(e){t.push(e)}return t.length?(console.log("There is an error when parse the file"),t):(t.push(...function(e,t){return e.map(e=>new e(t).validate()).reduce((e,t)=>(e.push(...t),e),[])}([f,h],n)),t)}(t.value))})})}]);